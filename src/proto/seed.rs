// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `seed.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Seed {
    // message fields
    pub id: ::std::string::String,
    // message oneof groups
    pub seed_source: ::std::option::Option<Seed_oneof_seed_source>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Seed {
    fn default() -> &'a Seed {
        <Seed as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Seed_oneof_seed_source {
    bytes(super::crypto::Encrypted),
    ledger(LedgerSeed),
}

impl Seed {
    pub fn new() -> Seed {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .emerald.vault.Encrypted bytes = 2;


    pub fn get_bytes(&self) -> &super::crypto::Encrypted {
        match self.seed_source {
            ::std::option::Option::Some(Seed_oneof_seed_source::bytes(ref v)) => v,
            _ => super::crypto::Encrypted::default_instance(),
        }
    }
    pub fn clear_bytes(&mut self) {
        self.seed_source = ::std::option::Option::None;
    }

    pub fn has_bytes(&self) -> bool {
        match self.seed_source {
            ::std::option::Option::Some(Seed_oneof_seed_source::bytes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: super::crypto::Encrypted) {
        self.seed_source = ::std::option::Option::Some(Seed_oneof_seed_source::bytes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bytes(&mut self) -> &mut super::crypto::Encrypted {
        if let ::std::option::Option::Some(Seed_oneof_seed_source::bytes(_)) = self.seed_source {
        } else {
            self.seed_source = ::std::option::Option::Some(Seed_oneof_seed_source::bytes(super::crypto::Encrypted::new()));
        }
        match self.seed_source {
            ::std::option::Option::Some(Seed_oneof_seed_source::bytes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bytes(&mut self) -> super::crypto::Encrypted {
        if self.has_bytes() {
            match self.seed_source.take() {
                ::std::option::Option::Some(Seed_oneof_seed_source::bytes(v)) => v,
                _ => panic!(),
            }
        } else {
            super::crypto::Encrypted::new()
        }
    }

    // .emerald.vault.LedgerSeed ledger = 3;


    pub fn get_ledger(&self) -> &LedgerSeed {
        match self.seed_source {
            ::std::option::Option::Some(Seed_oneof_seed_source::ledger(ref v)) => v,
            _ => LedgerSeed::default_instance(),
        }
    }
    pub fn clear_ledger(&mut self) {
        self.seed_source = ::std::option::Option::None;
    }

    pub fn has_ledger(&self) -> bool {
        match self.seed_source {
            ::std::option::Option::Some(Seed_oneof_seed_source::ledger(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ledger(&mut self, v: LedgerSeed) {
        self.seed_source = ::std::option::Option::Some(Seed_oneof_seed_source::ledger(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ledger(&mut self) -> &mut LedgerSeed {
        if let ::std::option::Option::Some(Seed_oneof_seed_source::ledger(_)) = self.seed_source {
        } else {
            self.seed_source = ::std::option::Option::Some(Seed_oneof_seed_source::ledger(LedgerSeed::new()));
        }
        match self.seed_source {
            ::std::option::Option::Some(Seed_oneof_seed_source::ledger(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ledger(&mut self) -> LedgerSeed {
        if self.has_ledger() {
            match self.seed_source.take() {
                ::std::option::Option::Some(Seed_oneof_seed_source::ledger(v)) => v,
                _ => panic!(),
            }
        } else {
            LedgerSeed::new()
        }
    }
}

impl ::protobuf::Message for Seed {
    fn is_initialized(&self) -> bool {
        if let Some(Seed_oneof_seed_source::bytes(ref v)) = self.seed_source {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Seed_oneof_seed_source::ledger(ref v)) = self.seed_source {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.seed_source = ::std::option::Option::Some(Seed_oneof_seed_source::bytes(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.seed_source = ::std::option::Option::Some(Seed_oneof_seed_source::ledger(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let ::std::option::Option::Some(ref v) = self.seed_source {
            match v {
                &Seed_oneof_seed_source::bytes(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Seed_oneof_seed_source::ledger(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.seed_source {
            match v {
                &Seed_oneof_seed_source::bytes(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Seed_oneof_seed_source::ledger(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Seed {
        Seed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &Seed| { &m.id },
                    |m: &mut Seed| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::crypto::Encrypted>(
                    "bytes",
                    Seed::has_bytes,
                    Seed::get_bytes,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LedgerSeed>(
                    "ledger",
                    Seed::has_ledger,
                    Seed::get_ledger,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Seed>(
                    "Seed",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Seed {
        static mut instance: ::protobuf::lazy::Lazy<Seed> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Seed,
        };
        unsafe {
            instance.get(Seed::new)
        }
    }
}

impl ::protobuf::Clear for Seed {
    fn clear(&mut self) {
        self.id.clear();
        self.seed_source = ::std::option::Option::None;
        self.seed_source = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Seed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Seed {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LedgerSeed {
    // message fields
    pub fingerprints: ::protobuf::RepeatedField<HDPathFingerprint>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LedgerSeed {
    fn default() -> &'a LedgerSeed {
        <LedgerSeed as ::protobuf::Message>::default_instance()
    }
}

impl LedgerSeed {
    pub fn new() -> LedgerSeed {
        ::std::default::Default::default()
    }

    // repeated .emerald.vault.HDPathFingerprint fingerprints = 1;


    pub fn get_fingerprints(&self) -> &[HDPathFingerprint] {
        &self.fingerprints
    }
    pub fn clear_fingerprints(&mut self) {
        self.fingerprints.clear();
    }

    // Param is passed by value, moved
    pub fn set_fingerprints(&mut self, v: ::protobuf::RepeatedField<HDPathFingerprint>) {
        self.fingerprints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fingerprints(&mut self) -> &mut ::protobuf::RepeatedField<HDPathFingerprint> {
        &mut self.fingerprints
    }

    // Take field
    pub fn take_fingerprints(&mut self) -> ::protobuf::RepeatedField<HDPathFingerprint> {
        ::std::mem::replace(&mut self.fingerprints, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LedgerSeed {
    fn is_initialized(&self) -> bool {
        for v in &self.fingerprints {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fingerprints)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fingerprints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fingerprints {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LedgerSeed {
        LedgerSeed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HDPathFingerprint>>(
                    "fingerprints",
                    |m: &LedgerSeed| { &m.fingerprints },
                    |m: &mut LedgerSeed| { &mut m.fingerprints },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LedgerSeed>(
                    "LedgerSeed",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LedgerSeed {
        static mut instance: ::protobuf::lazy::Lazy<LedgerSeed> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LedgerSeed,
        };
        unsafe {
            instance.get(LedgerSeed::new)
        }
    }
}

impl ::protobuf::Clear for LedgerSeed {
    fn clear(&mut self) {
        self.fingerprints.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LedgerSeed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LedgerSeed {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HDPathFingerprint {
    // message fields
    pub path: ::std::string::String,
    pub field_type: HDPathFingerprint_Type,
    pub fingerprint: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HDPathFingerprint {
    fn default() -> &'a HDPathFingerprint {
        <HDPathFingerprint as ::protobuf::Message>::default_instance()
    }
}

impl HDPathFingerprint {
    pub fn new() -> HDPathFingerprint {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // .emerald.vault.HDPathFingerprint.Type type = 2;


    pub fn get_field_type(&self) -> HDPathFingerprint_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = HDPathFingerprint_Type::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: HDPathFingerprint_Type) {
        self.field_type = v;
    }

    // bytes fingerprint = 3;


    pub fn get_fingerprint(&self) -> &[u8] {
        &self.fingerprint
    }
    pub fn clear_fingerprint(&mut self) {
        self.fingerprint.clear();
    }

    // Param is passed by value, moved
    pub fn set_fingerprint(&mut self, v: ::std::vec::Vec<u8>) {
        self.fingerprint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fingerprint(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.fingerprint
    }

    // Take field
    pub fn take_fingerprint(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.fingerprint, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for HDPathFingerprint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.fingerprint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if self.field_type != HDPathFingerprint_Type::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if !self.fingerprint.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.fingerprint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if self.field_type != HDPathFingerprint_Type::UNKNOWN {
            os.write_enum(2, self.field_type.value())?;
        }
        if !self.fingerprint.is_empty() {
            os.write_bytes(3, &self.fingerprint)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HDPathFingerprint {
        HDPathFingerprint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &HDPathFingerprint| { &m.path },
                    |m: &mut HDPathFingerprint| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HDPathFingerprint_Type>>(
                    "type",
                    |m: &HDPathFingerprint| { &m.field_type },
                    |m: &mut HDPathFingerprint| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "fingerprint",
                    |m: &HDPathFingerprint| { &m.fingerprint },
                    |m: &mut HDPathFingerprint| { &mut m.fingerprint },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HDPathFingerprint>(
                    "HDPathFingerprint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HDPathFingerprint {
        static mut instance: ::protobuf::lazy::Lazy<HDPathFingerprint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HDPathFingerprint,
        };
        unsafe {
            instance.get(HDPathFingerprint::new)
        }
    }
}

impl ::protobuf::Clear for HDPathFingerprint {
    fn clear(&mut self) {
        self.path.clear();
        self.field_type = HDPathFingerprint_Type::UNKNOWN;
        self.fingerprint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HDPathFingerprint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HDPathFingerprint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HDPathFingerprint_Type {
    UNKNOWN = 0,
    ADDRESS_SHA256 = 1,
}

impl ::protobuf::ProtobufEnum for HDPathFingerprint_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HDPathFingerprint_Type> {
        match value {
            0 => ::std::option::Option::Some(HDPathFingerprint_Type::UNKNOWN),
            1 => ::std::option::Option::Some(HDPathFingerprint_Type::ADDRESS_SHA256),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HDPathFingerprint_Type] = &[
            HDPathFingerprint_Type::UNKNOWN,
            HDPathFingerprint_Type::ADDRESS_SHA256,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("HDPathFingerprint_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for HDPathFingerprint_Type {
}

impl ::std::default::Default for HDPathFingerprint_Type {
    fn default() -> Self {
        HDPathFingerprint_Type::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for HDPathFingerprint_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SeedHD {
    // message fields
    pub seed_id: ::std::string::String,
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SeedHD {
    fn default() -> &'a SeedHD {
        <SeedHD as ::protobuf::Message>::default_instance()
    }
}

impl SeedHD {
    pub fn new() -> SeedHD {
        ::std::default::Default::default()
    }

    // string seed_id = 1;


    pub fn get_seed_id(&self) -> &str {
        &self.seed_id
    }
    pub fn clear_seed_id(&mut self) {
        self.seed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_seed_id(&mut self, v: ::std::string::String) {
        self.seed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seed_id(&mut self) -> &mut ::std::string::String {
        &mut self.seed_id
    }

    // Take field
    pub fn take_seed_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seed_id, ::std::string::String::new())
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SeedHD {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seed_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seed_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seed_id);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seed_id.is_empty() {
            os.write_string(1, &self.seed_id)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SeedHD {
        SeedHD::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "seed_id",
                    |m: &SeedHD| { &m.seed_id },
                    |m: &mut SeedHD| { &mut m.seed_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &SeedHD| { &m.path },
                    |m: &mut SeedHD| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SeedHD>(
                    "SeedHD",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SeedHD {
        static mut instance: ::protobuf::lazy::Lazy<SeedHD> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SeedHD,
        };
        unsafe {
            instance.get(SeedHD::new)
        }
    }
}

impl ::protobuf::Clear for SeedHD {
    fn clear(&mut self) {
        self.seed_id.clear();
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SeedHD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SeedHD {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nseed.proto\x12\remerald.vault\x1a\x0ccrypto.proto\"\x8c\x01\n\x04See\
    d\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x120\n\x05bytes\x18\x02\x20\
    \x01(\x0b2\x18.emerald.vault.EncryptedH\0R\x05bytes\x123\n\x06ledger\x18\
    \x03\x20\x01(\x0b2\x19.emerald.vault.LedgerSeedH\0R\x06ledgerB\r\n\x0bse\
    ed_source\"R\n\nLedgerSeed\x12D\n\x0cfingerprints\x18\x01\x20\x03(\x0b2\
    \x20.emerald.vault.HDPathFingerprintR\x0cfingerprints\"\xad\x01\n\x11HDP\
    athFingerprint\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x129\n\x04t\
    ype\x18\x02\x20\x01(\x0e2%.emerald.vault.HDPathFingerprint.TypeR\x04type\
    \x12\x20\n\x0bfingerprint\x18\x03\x20\x01(\x0cR\x0bfingerprint\"'\n\x04T\
    ype\x12\x0b\n\x07UNKNOWN\x10\0\x12\x12\n\x0eADDRESS_SHA256\x10\x01\"5\n\
    \x06SeedHD\x12\x17\n\x07seed_id\x18\x01\x20\x01(\tR\x06seedId\x12\x12\n\
    \x04path\x18\x02\x20\x01(\tR\x04pathJ\xf4\x06\n\x06\x12\x04\0\0\x1f\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x16\n\t\n\
    \x02\x03\0\x12\x03\x02\0\x16\n\n\n\x02\x04\0\x12\x04\x04\0\x0b\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x04\x08\x0c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\
    \x04\x12\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x05\x04\x04\x0e\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x05\x0b\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x10\x11\n\x0c\n\x04\
    \x04\0\x08\0\x12\x04\x07\x04\n\x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\
    \x07\n\x15\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x08\x08\x1c\n\x0c\n\x05\x04\
    \0\x02\x01\x06\x12\x03\x08\x08\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x08\x12\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x1a\x1b\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\t\x08\x1e\n\x0c\n\x05\x04\0\x02\x02\x06\x12\
    \x03\t\x08\x12\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\x13\x19\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\t\x1c\x1d\n\n\n\x02\x04\x01\x12\x04\r\0\
    \x0f\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x12\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\x0e\x040\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x0e\x04\x0c\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0e\r\x1e\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x0e\x1f+\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e./\n\n\n\
    \x02\x04\x02\x12\x04\x11\0\x1a\x01\n\n\n\x03\x04\x02\x01\x12\x03\x11\x08\
    \x19\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x12\x04\x14\n\r\n\x05\x04\x02\x02\
    \0\x04\x12\x04\x12\x04\x11\x1b\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x12\
    \x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x12\x0b\x0f\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x12\x12\x13\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x13\x04\x12\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x13\x04\x12\x14\n\x0c\
    \n\x05\x04\x02\x02\x01\x06\x12\x03\x13\x04\x08\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03\x13\t\r\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x13\x10\
    \x11\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x14\x04\x1a\n\r\n\x05\x04\x02\
    \x02\x02\x04\x12\x04\x14\x04\x13\x12\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03\x14\x04\t\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x14\n\x15\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03\x14\x18\x19\n\x0c\n\x04\x04\x02\x04\0\
    \x12\x04\x16\x04\x19\x05\n\x0c\n\x05\x04\x02\x04\0\x01\x12\x03\x16\t\r\n\
    \r\n\x06\x04\x02\x04\0\x02\0\x12\x03\x17\x08\x14\n\x0e\n\x07\x04\x02\x04\
    \0\x02\0\x01\x12\x03\x17\x08\x0f\n\x0e\n\x07\x04\x02\x04\0\x02\0\x02\x12\
    \x03\x17\x12\x13\n\r\n\x06\x04\x02\x04\0\x02\x01\x12\x03\x18\x08\x1b\n\
    \x0e\n\x07\x04\x02\x04\0\x02\x01\x01\x12\x03\x18\x08\x16\n\x0e\n\x07\x04\
    \x02\x04\0\x02\x01\x02\x12\x03\x18\x19\x1a\n\n\n\x02\x04\x03\x12\x04\x1c\
    \0\x1f\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1c\x08\x0e\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x03\x1d\x04\x17\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x1d\x04\
    \x1c\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03\x1d\x0b\x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\
    \x1d\x15\x16\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1e\x04\x14\n\r\n\x05\
    \x04\x03\x02\x01\x04\x12\x04\x1e\x04\x1d\x17\n\x0c\n\x05\x04\x03\x02\x01\
    \x05\x12\x03\x1e\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1e\x0b\
    \x0f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1e\x12\x13b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
