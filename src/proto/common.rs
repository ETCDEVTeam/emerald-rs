// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct File {
    // message fields
    pub file_type: FileType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a File {
    fn default() -> &'a File {
        <File as ::protobuf::Message>::default_instance()
    }
}

impl File {
    pub fn new() -> File {
        ::std::default::Default::default()
    }

    // .emerald.vault.FileType file_type = 1;


    pub fn get_file_type(&self) -> FileType {
        self.file_type
    }
    pub fn clear_file_type(&mut self) {
        self.file_type = FileType::FILE_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_file_type(&mut self, v: FileType) {
        self.file_type = v;
    }
}

impl ::protobuf::Message for File {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.file_type, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.file_type != FileType::FILE_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.file_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.file_type != FileType::FILE_UNKNOWN {
            os.write_enum(1, self.file_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> File {
        File::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FileType>>(
                    "file_type",
                    |m: &File| { &m.file_type },
                    |m: &mut File| { &mut m.file_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<File>(
                    "File",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static File {
        static mut instance: ::protobuf::lazy::Lazy<File> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const File,
        };
        unsafe {
            instance.get(File::new)
        }
    }
}

impl ::protobuf::Clear for File {
    fn clear(&mut self) {
        self.file_type = FileType::FILE_UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for File {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for File {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FileType {
    FILE_UNKNOWN = 0,
    FILE_WALLET = 1,
    FILE_PK = 2,
    FILE_SEED = 3,
    FILE_BOOK = 4,
}

impl ::protobuf::ProtobufEnum for FileType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FileType> {
        match value {
            0 => ::std::option::Option::Some(FileType::FILE_UNKNOWN),
            1 => ::std::option::Option::Some(FileType::FILE_WALLET),
            2 => ::std::option::Option::Some(FileType::FILE_PK),
            3 => ::std::option::Option::Some(FileType::FILE_SEED),
            4 => ::std::option::Option::Some(FileType::FILE_BOOK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FileType] = &[
            FileType::FILE_UNKNOWN,
            FileType::FILE_WALLET,
            FileType::FILE_PK,
            FileType::FILE_SEED,
            FileType::FILE_BOOK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("FileType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for FileType {
}

impl ::std::default::Default for FileType {
    fn default() -> Self {
        FileType::FILE_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for FileType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BlockchainId {
    CHAIN_UNSPECIFIED = 0,
    CHAIN_BITCOIN = 1,
    CHAIN_GRIN = 2,
    CHAIN_ETHEREUM = 100,
    CHAIN_ETHEREUM_CLASSIC = 101,
    CHAIN_LIGHTNING = 1001,
    CHAIN_KOVAN = 10002,
    CHAIN_TESTNET_BITCOIN = 10003,
    CHAIN_FLOONET = 10004,
}

impl ::protobuf::ProtobufEnum for BlockchainId {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BlockchainId> {
        match value {
            0 => ::std::option::Option::Some(BlockchainId::CHAIN_UNSPECIFIED),
            1 => ::std::option::Option::Some(BlockchainId::CHAIN_BITCOIN),
            2 => ::std::option::Option::Some(BlockchainId::CHAIN_GRIN),
            100 => ::std::option::Option::Some(BlockchainId::CHAIN_ETHEREUM),
            101 => ::std::option::Option::Some(BlockchainId::CHAIN_ETHEREUM_CLASSIC),
            1001 => ::std::option::Option::Some(BlockchainId::CHAIN_LIGHTNING),
            10002 => ::std::option::Option::Some(BlockchainId::CHAIN_KOVAN),
            10003 => ::std::option::Option::Some(BlockchainId::CHAIN_TESTNET_BITCOIN),
            10004 => ::std::option::Option::Some(BlockchainId::CHAIN_FLOONET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BlockchainId] = &[
            BlockchainId::CHAIN_UNSPECIFIED,
            BlockchainId::CHAIN_BITCOIN,
            BlockchainId::CHAIN_GRIN,
            BlockchainId::CHAIN_ETHEREUM,
            BlockchainId::CHAIN_ETHEREUM_CLASSIC,
            BlockchainId::CHAIN_LIGHTNING,
            BlockchainId::CHAIN_KOVAN,
            BlockchainId::CHAIN_TESTNET_BITCOIN,
            BlockchainId::CHAIN_FLOONET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("BlockchainId", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for BlockchainId {
}

impl ::std::default::Default for BlockchainId {
    fn default() -> Self {
        BlockchainId::CHAIN_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockchainId {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccommon.proto\x12\remerald.vault\"<\n\x04File\x124\n\tfile_type\x18\
    \x01\x20\x01(\x0e2\x17.emerald.vault.FileTypeR\x08fileType*X\n\x08FileTy\
    pe\x12\x10\n\x0cFILE_UNKNOWN\x10\0\x12\x0f\n\x0bFILE_WALLET\x10\x01\x12\
    \x0b\n\x07FILE_PK\x10\x02\x12\r\n\tFILE_SEED\x10\x03\x12\r\n\tFILE_BOOK\
    \x10\x04*\xd0\x01\n\x0cBlockchainId\x12\x15\n\x11CHAIN_UNSPECIFIED\x10\0\
    \x12\x11\n\rCHAIN_BITCOIN\x10\x01\x12\x0e\n\nCHAIN_GRIN\x10\x02\x12\x12\
    \n\x0eCHAIN_ETHEREUM\x10d\x12\x1a\n\x16CHAIN_ETHEREUM_CLASSIC\x10e\x12\
    \x14\n\x0fCHAIN_LIGHTNING\x10\xe9\x07\x12\x10\n\x0bCHAIN_KOVAN\x10\x92N\
    \x12\x1a\n\x15CHAIN_TESTNET_BITCOIN\x10\x93N\x12\x12\n\rCHAIN_FLOONET\
    \x10\x94NJ\x86\x06\n\x06\x12\x04\0\0\x1f\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\0\x16\n\n\n\x02\x04\0\x12\x04\x03\0\x05\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\x0c\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x04\x04\x1b\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x04\x04\x0c\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x04\r\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x04\x19\x1a\n\n\n\x02\x05\0\x12\x04\x07\0\r\x01\n\n\n\x03\x05\0\x01\
    \x12\x03\x07\x05\r\n\x0b\n\x04\x05\0\x02\0\x12\x03\x08\x04\x15\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x08\x04\x10\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x08\x13\x14\n\x0b\n\x04\x05\0\x02\x01\x12\x03\t\x04\x14\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x03\t\x04\x0f\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\t\x12\x13\n\x0b\n\x04\x05\0\x02\x02\x12\x03\n\x04\x10\n\x0c\n\x05\
    \x05\0\x02\x02\x01\x12\x03\n\x04\x0b\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03\n\x0e\x0f\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0b\x04\x12\n\x0c\n\x05\
    \x05\0\x02\x03\x01\x12\x03\x0b\x04\r\n\x0c\n\x05\x05\0\x02\x03\x02\x12\
    \x03\x0b\x10\x11\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x0c\x04\x12\n\x0c\n\
    \x05\x05\0\x02\x04\x01\x12\x03\x0c\x04\r\n\x0c\n\x05\x05\0\x02\x04\x02\
    \x12\x03\x0c\x10\x11\n\n\n\x02\x05\x01\x12\x04\x0f\0\x1f\x01\n\n\n\x03\
    \x05\x01\x01\x12\x03\x0f\x05\x11\n\x0b\n\x04\x05\x01\x02\0\x12\x03\x10\
    \x04\x1a\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x10\x04\x15\n\x0c\n\x05\
    \x05\x01\x02\0\x02\x12\x03\x10\x18\x19\n\x0b\n\x04\x05\x01\x02\x01\x12\
    \x03\x12\x04\x16\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x12\x04\x11\n\
    \x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x12\x14\x15\n\x0b\n\x04\x05\x01\
    \x02\x02\x12\x03\x13\x04\x13\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\x13\
    \x04\x0e\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x13\x11\x12\n\x0b\n\x04\
    \x05\x01\x02\x03\x12\x03\x15\x04\x19\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\
    \x03\x15\x04\x12\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x15\x15\x18\n\
    \x0b\n\x04\x05\x01\x02\x04\x12\x03\x16\x04!\n\x0c\n\x05\x05\x01\x02\x04\
    \x01\x12\x03\x16\x04\x1a\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x16\x1d\
    \x20\n,\n\x04\x05\x01\x02\x05\x12\x03\x19\x04\x1b\x1a\x1f\x20Sidechains\
    \x20and\x20state\x20channels\n\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03\
    \x19\x04\x13\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x19\x16\x1a\n\x17\n\
    \x04\x05\x01\x02\x06\x12\x03\x1c\x04\x18\x1a\n\x20Testnets\n\n\x0c\n\x05\
    \x05\x01\x02\x06\x01\x12\x03\x1c\x04\x0f\n\x0c\n\x05\x05\x01\x02\x06\x02\
    \x12\x03\x1c\x12\x17\n\x0b\n\x04\x05\x01\x02\x07\x12\x03\x1d\x04\"\n\x0c\
    \n\x05\x05\x01\x02\x07\x01\x12\x03\x1d\x04\x19\n\x0c\n\x05\x05\x01\x02\
    \x07\x02\x12\x03\x1d\x1c!\n\x0b\n\x04\x05\x01\x02\x08\x12\x03\x1e\x04\
    \x1a\n\x0c\n\x05\x05\x01\x02\x08\x01\x12\x03\x1e\x04\x11\n\x0c\n\x05\x05\
    \x01\x02\x08\x02\x12\x03\x1e\x14\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
