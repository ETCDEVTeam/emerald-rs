// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `pk.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct PrivateKey {
    // message fields
    pub id: ::std::string::String,
    // message oneof groups
    pub pk: ::std::option::Option<PrivateKey_oneof_pk>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrivateKey {
    fn default() -> &'a PrivateKey {
        <PrivateKey as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum PrivateKey_oneof_pk {
    ethereum(EthereumPrivateKey),
    bitcoin(BitcoinPrivateKey),
    xpriv(Bip32Private),
}

impl PrivateKey {
    pub fn new() -> PrivateKey {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .emerald.vault.EthereumPrivateKey ethereum = 2;


    pub fn get_ethereum(&self) -> &EthereumPrivateKey {
        match self.pk {
            ::std::option::Option::Some(PrivateKey_oneof_pk::ethereum(ref v)) => v,
            _ => EthereumPrivateKey::default_instance(),
        }
    }
    pub fn clear_ethereum(&mut self) {
        self.pk = ::std::option::Option::None;
    }

    pub fn has_ethereum(&self) -> bool {
        match self.pk {
            ::std::option::Option::Some(PrivateKey_oneof_pk::ethereum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ethereum(&mut self, v: EthereumPrivateKey) {
        self.pk = ::std::option::Option::Some(PrivateKey_oneof_pk::ethereum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ethereum(&mut self) -> &mut EthereumPrivateKey {
        if let ::std::option::Option::Some(PrivateKey_oneof_pk::ethereum(_)) = self.pk {
        } else {
            self.pk = ::std::option::Option::Some(PrivateKey_oneof_pk::ethereum(EthereumPrivateKey::new()));
        }
        match self.pk {
            ::std::option::Option::Some(PrivateKey_oneof_pk::ethereum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ethereum(&mut self) -> EthereumPrivateKey {
        if self.has_ethereum() {
            match self.pk.take() {
                ::std::option::Option::Some(PrivateKey_oneof_pk::ethereum(v)) => v,
                _ => panic!(),
            }
        } else {
            EthereumPrivateKey::new()
        }
    }

    // .emerald.vault.BitcoinPrivateKey bitcoin = 3;


    pub fn get_bitcoin(&self) -> &BitcoinPrivateKey {
        match self.pk {
            ::std::option::Option::Some(PrivateKey_oneof_pk::bitcoin(ref v)) => v,
            _ => BitcoinPrivateKey::default_instance(),
        }
    }
    pub fn clear_bitcoin(&mut self) {
        self.pk = ::std::option::Option::None;
    }

    pub fn has_bitcoin(&self) -> bool {
        match self.pk {
            ::std::option::Option::Some(PrivateKey_oneof_pk::bitcoin(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bitcoin(&mut self, v: BitcoinPrivateKey) {
        self.pk = ::std::option::Option::Some(PrivateKey_oneof_pk::bitcoin(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bitcoin(&mut self) -> &mut BitcoinPrivateKey {
        if let ::std::option::Option::Some(PrivateKey_oneof_pk::bitcoin(_)) = self.pk {
        } else {
            self.pk = ::std::option::Option::Some(PrivateKey_oneof_pk::bitcoin(BitcoinPrivateKey::new()));
        }
        match self.pk {
            ::std::option::Option::Some(PrivateKey_oneof_pk::bitcoin(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bitcoin(&mut self) -> BitcoinPrivateKey {
        if self.has_bitcoin() {
            match self.pk.take() {
                ::std::option::Option::Some(PrivateKey_oneof_pk::bitcoin(v)) => v,
                _ => panic!(),
            }
        } else {
            BitcoinPrivateKey::new()
        }
    }

    // .emerald.vault.Bip32Private xpriv = 4;


    pub fn get_xpriv(&self) -> &Bip32Private {
        match self.pk {
            ::std::option::Option::Some(PrivateKey_oneof_pk::xpriv(ref v)) => v,
            _ => Bip32Private::default_instance(),
        }
    }
    pub fn clear_xpriv(&mut self) {
        self.pk = ::std::option::Option::None;
    }

    pub fn has_xpriv(&self) -> bool {
        match self.pk {
            ::std::option::Option::Some(PrivateKey_oneof_pk::xpriv(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_xpriv(&mut self, v: Bip32Private) {
        self.pk = ::std::option::Option::Some(PrivateKey_oneof_pk::xpriv(v))
    }

    // Mutable pointer to the field.
    pub fn mut_xpriv(&mut self) -> &mut Bip32Private {
        if let ::std::option::Option::Some(PrivateKey_oneof_pk::xpriv(_)) = self.pk {} else {
            self.pk = ::std::option::Option::Some(PrivateKey_oneof_pk::xpriv(Bip32Private::new()));
        }
        match self.pk {
            ::std::option::Option::Some(PrivateKey_oneof_pk::xpriv(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_xpriv(&mut self) -> Bip32Private {
        if self.has_xpriv() {
            match self.pk.take() {
                ::std::option::Option::Some(PrivateKey_oneof_pk::xpriv(v)) => v,
                _ => panic!(),
            }
        } else {
            Bip32Private::new()
        }
    }
}

impl ::protobuf::Message for PrivateKey {
    fn is_initialized(&self) -> bool {
        if let Some(PrivateKey_oneof_pk::ethereum(ref v)) = self.pk {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PrivateKey_oneof_pk::bitcoin(ref v)) = self.pk {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PrivateKey_oneof_pk::xpriv(ref v)) = self.pk {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk = ::std::option::Option::Some(PrivateKey_oneof_pk::ethereum(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk = ::std::option::Option::Some(PrivateKey_oneof_pk::bitcoin(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk = ::std::option::Option::Some(PrivateKey_oneof_pk::xpriv(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let ::std::option::Option::Some(ref v) = self.pk {
            match v {
                &PrivateKey_oneof_pk::ethereum(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PrivateKey_oneof_pk::bitcoin(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PrivateKey_oneof_pk::xpriv(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.pk {
            match v {
                &PrivateKey_oneof_pk::ethereum(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PrivateKey_oneof_pk::bitcoin(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PrivateKey_oneof_pk::xpriv(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrivateKey {
        PrivateKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &PrivateKey| { &m.id },
                    |m: &mut PrivateKey| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, EthereumPrivateKey>(
                    "ethereum",
                    PrivateKey::has_ethereum,
                    PrivateKey::get_ethereum,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BitcoinPrivateKey>(
                    "bitcoin",
                    PrivateKey::has_bitcoin,
                    PrivateKey::get_bitcoin,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Bip32Private>(
                    "xpriv",
                    PrivateKey::has_xpriv,
                    PrivateKey::get_xpriv,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PrivateKey>(
                    "PrivateKey",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static PrivateKey {
        static mut instance: ::protobuf::lazy::Lazy<PrivateKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PrivateKey,
        };
        unsafe {
            instance.get(PrivateKey::new)
        }
    }
}

impl ::protobuf::Clear for PrivateKey {
    fn clear(&mut self) {
        self.id.clear();
        self.pk = ::std::option::Option::None;
        self.pk = ::std::option::Option::None;
        self.pk = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PrivateKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrivateKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumPrivateKey {
    // message oneof groups
    pub pk_type: ::std::option::Option<EthereumPrivateKey_oneof_pk_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumPrivateKey {
    fn default() -> &'a EthereumPrivateKey {
        <EthereumPrivateKey as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum EthereumPrivateKey_oneof_pk_type {
    pk(EthereumPK3),
}

impl EthereumPrivateKey {
    pub fn new() -> EthereumPrivateKey {
        ::std::default::Default::default()
    }

    // .emerald.vault.EthereumPK3 pk = 1;


    pub fn get_pk(&self) -> &EthereumPK3 {
        match self.pk_type {
            ::std::option::Option::Some(EthereumPrivateKey_oneof_pk_type::pk(ref v)) => v,
            _ => EthereumPK3::default_instance(),
        }
    }
    pub fn clear_pk(&mut self) {
        self.pk_type = ::std::option::Option::None;
    }

    pub fn has_pk(&self) -> bool {
        match self.pk_type {
            ::std::option::Option::Some(EthereumPrivateKey_oneof_pk_type::pk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pk(&mut self, v: EthereumPK3) {
        self.pk_type = ::std::option::Option::Some(EthereumPrivateKey_oneof_pk_type::pk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pk(&mut self) -> &mut EthereumPK3 {
        if let ::std::option::Option::Some(EthereumPrivateKey_oneof_pk_type::pk(_)) = self.pk_type {
        } else {
            self.pk_type = ::std::option::Option::Some(EthereumPrivateKey_oneof_pk_type::pk(EthereumPK3::new()));
        }
        match self.pk_type {
            ::std::option::Option::Some(EthereumPrivateKey_oneof_pk_type::pk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pk(&mut self) -> EthereumPK3 {
        if self.has_pk() {
            match self.pk_type.take() {
                ::std::option::Option::Some(EthereumPrivateKey_oneof_pk_type::pk(v)) => v,
                _ => panic!(),
            }
        } else {
            EthereumPK3::new()
        }
    }
}

impl ::protobuf::Message for EthereumPrivateKey {
    fn is_initialized(&self) -> bool {
        if let Some(EthereumPrivateKey_oneof_pk_type::pk(ref v)) = self.pk_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk_type = ::std::option::Option::Some(EthereumPrivateKey_oneof_pk_type::pk(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.pk_type {
            match v {
                &EthereumPrivateKey_oneof_pk_type::pk(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.pk_type {
            match v {
                &EthereumPrivateKey_oneof_pk_type::pk(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumPrivateKey {
        EthereumPrivateKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, EthereumPK3>(
                    "pk",
                    EthereumPrivateKey::has_pk,
                    EthereumPrivateKey::get_pk,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumPrivateKey>(
                    "EthereumPrivateKey",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumPrivateKey {
        static mut instance: ::protobuf::lazy::Lazy<EthereumPrivateKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumPrivateKey,
        };
        unsafe {
            instance.get(EthereumPrivateKey::new)
        }
    }
}

impl ::protobuf::Clear for EthereumPrivateKey {
    fn clear(&mut self) {
        self.pk_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumPrivateKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumPrivateKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BitcoinPrivateKey {
    // message fields
    pub format: BitcoinPrivateKey_Format,
    // message oneof groups
    pub pk_type: ::std::option::Option<BitcoinPrivateKey_oneof_pk_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BitcoinPrivateKey {
    fn default() -> &'a BitcoinPrivateKey {
        <BitcoinPrivateKey as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum BitcoinPrivateKey_oneof_pk_type {
    pk(BitcoinRawPK),
    open_dime(OpenDime),
}

impl BitcoinPrivateKey {
    pub fn new() -> BitcoinPrivateKey {
        ::std::default::Default::default()
    }

    // .emerald.vault.BitcoinPrivateKey.Format format = 1;


    pub fn get_format(&self) -> BitcoinPrivateKey_Format {
        self.format
    }
    pub fn clear_format(&mut self) {
        self.format = BitcoinPrivateKey_Format::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_format(&mut self, v: BitcoinPrivateKey_Format) {
        self.format = v;
    }

    // .emerald.vault.BitcoinRawPK pk = 2;


    pub fn get_pk(&self) -> &BitcoinRawPK {
        match self.pk_type {
            ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::pk(ref v)) => v,
            _ => BitcoinRawPK::default_instance(),
        }
    }
    pub fn clear_pk(&mut self) {
        self.pk_type = ::std::option::Option::None;
    }

    pub fn has_pk(&self) -> bool {
        match self.pk_type {
            ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::pk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pk(&mut self, v: BitcoinRawPK) {
        self.pk_type = ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::pk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pk(&mut self) -> &mut BitcoinRawPK {
        if let ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::pk(_)) = self.pk_type {
        } else {
            self.pk_type = ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::pk(BitcoinRawPK::new()));
        }
        match self.pk_type {
            ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::pk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pk(&mut self) -> BitcoinRawPK {
        if self.has_pk() {
            match self.pk_type.take() {
                ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::pk(v)) => v,
                _ => panic!(),
            }
        } else {
            BitcoinRawPK::new()
        }
    }

    // .emerald.vault.OpenDime open_dime = 3;


    pub fn get_open_dime(&self) -> &OpenDime {
        match self.pk_type {
            ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::open_dime(ref v)) => v,
            _ => OpenDime::default_instance(),
        }
    }
    pub fn clear_open_dime(&mut self) {
        self.pk_type = ::std::option::Option::None;
    }

    pub fn has_open_dime(&self) -> bool {
        match self.pk_type {
            ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::open_dime(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_open_dime(&mut self, v: OpenDime) {
        self.pk_type = ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::open_dime(v))
    }

    // Mutable pointer to the field.
    pub fn mut_open_dime(&mut self) -> &mut OpenDime {
        if let ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::open_dime(_)) = self.pk_type {
        } else {
            self.pk_type = ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::open_dime(OpenDime::new()));
        }
        match self.pk_type {
            ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::open_dime(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_open_dime(&mut self) -> OpenDime {
        if self.has_open_dime() {
            match self.pk_type.take() {
                ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::open_dime(v)) => v,
                _ => panic!(),
            }
        } else {
            OpenDime::new()
        }
    }
}

impl ::protobuf::Message for BitcoinPrivateKey {
    fn is_initialized(&self) -> bool {
        if let Some(BitcoinPrivateKey_oneof_pk_type::pk(ref v)) = self.pk_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BitcoinPrivateKey_oneof_pk_type::open_dime(ref v)) = self.pk_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.format, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk_type = ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::pk(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk_type = ::std::option::Option::Some(BitcoinPrivateKey_oneof_pk_type::open_dime(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.format != BitcoinPrivateKey_Format::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(1, self.format);
        }
        if let ::std::option::Option::Some(ref v) = self.pk_type {
            match v {
                &BitcoinPrivateKey_oneof_pk_type::pk(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BitcoinPrivateKey_oneof_pk_type::open_dime(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.format != BitcoinPrivateKey_Format::UNDEFINED {
            os.write_enum(1, self.format.value())?;
        }
        if let ::std::option::Option::Some(ref v) = self.pk_type {
            match v {
                &BitcoinPrivateKey_oneof_pk_type::pk(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BitcoinPrivateKey_oneof_pk_type::open_dime(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BitcoinPrivateKey {
        BitcoinPrivateKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BitcoinPrivateKey_Format>>(
                    "format",
                    |m: &BitcoinPrivateKey| { &m.format },
                    |m: &mut BitcoinPrivateKey| { &mut m.format },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BitcoinRawPK>(
                    "pk",
                    BitcoinPrivateKey::has_pk,
                    BitcoinPrivateKey::get_pk,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, OpenDime>(
                    "open_dime",
                    BitcoinPrivateKey::has_open_dime,
                    BitcoinPrivateKey::get_open_dime,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BitcoinPrivateKey>(
                    "BitcoinPrivateKey",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BitcoinPrivateKey {
        static mut instance: ::protobuf::lazy::Lazy<BitcoinPrivateKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BitcoinPrivateKey,
        };
        unsafe {
            instance.get(BitcoinPrivateKey::new)
        }
    }
}

impl ::protobuf::Clear for BitcoinPrivateKey {
    fn clear(&mut self) {
        self.format = BitcoinPrivateKey_Format::UNDEFINED;
        self.pk_type = ::std::option::Option::None;
        self.pk_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BitcoinPrivateKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BitcoinPrivateKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum BitcoinPrivateKey_Format {
    UNDEFINED = 0,
    P2PKH = 1,
    P2SH = 2,
    BECH32 = 3,
}

impl ::protobuf::ProtobufEnum for BitcoinPrivateKey_Format {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BitcoinPrivateKey_Format> {
        match value {
            0 => ::std::option::Option::Some(BitcoinPrivateKey_Format::UNDEFINED),
            1 => ::std::option::Option::Some(BitcoinPrivateKey_Format::P2PKH),
            2 => ::std::option::Option::Some(BitcoinPrivateKey_Format::P2SH),
            3 => ::std::option::Option::Some(BitcoinPrivateKey_Format::BECH32),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BitcoinPrivateKey_Format] = &[
            BitcoinPrivateKey_Format::UNDEFINED,
            BitcoinPrivateKey_Format::P2PKH,
            BitcoinPrivateKey_Format::P2SH,
            BitcoinPrivateKey_Format::BECH32,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("BitcoinPrivateKey_Format", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for BitcoinPrivateKey_Format {}

impl ::std::default::Default for BitcoinPrivateKey_Format {
    fn default() -> Self {
        BitcoinPrivateKey_Format::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for BitcoinPrivateKey_Format {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct EthereumPK3 {
    // message fields
    pub address: ::std::string::String,
    pub value: ::protobuf::SingularPtrField<super::crypto::Encrypted>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumPK3 {
    fn default() -> &'a EthereumPK3 {
        <EthereumPK3 as ::protobuf::Message>::default_instance()
    }
}

impl EthereumPK3 {
    pub fn new() -> EthereumPK3 {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // .emerald.vault.Encrypted value = 2;


    pub fn get_value(&self) -> &super::crypto::Encrypted {
        self.value.as_ref().unwrap_or_else(|| super::crypto::Encrypted::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::crypto::Encrypted) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::crypto::Encrypted {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::crypto::Encrypted {
        self.value.take().unwrap_or_else(|| super::crypto::Encrypted::new())
    }
}

impl ::protobuf::Message for EthereumPK3 {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumPK3 {
        EthereumPK3::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &EthereumPK3| { &m.address },
                    |m: &mut EthereumPK3| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::crypto::Encrypted>>(
                    "value",
                    |m: &EthereumPK3| { &m.value },
                    |m: &mut EthereumPK3| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumPK3>(
                    "EthereumPK3",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumPK3 {
        static mut instance: ::protobuf::lazy::Lazy<EthereumPK3> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumPK3,
        };
        unsafe {
            instance.get(EthereumPK3::new)
        }
    }
}

impl ::protobuf::Clear for EthereumPK3 {
    fn clear(&mut self) {
        self.address.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumPK3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumPK3 {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BitcoinRawPK {
    // message fields
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BitcoinRawPK {
    fn default() -> &'a BitcoinRawPK {
        <BitcoinRawPK as ::protobuf::Message>::default_instance()
    }
}

impl BitcoinRawPK {
    pub fn new() -> BitcoinRawPK {
        ::std::default::Default::default()
    }

    // bytes value = 1;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BitcoinRawPK {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_bytes(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BitcoinRawPK {
        BitcoinRawPK::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &BitcoinRawPK| { &m.value },
                    |m: &mut BitcoinRawPK| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BitcoinRawPK>(
                    "BitcoinRawPK",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BitcoinRawPK {
        static mut instance: ::protobuf::lazy::Lazy<BitcoinRawPK> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BitcoinRawPK,
        };
        unsafe {
            instance.get(BitcoinRawPK::new)
        }
    }
}

impl ::protobuf::Clear for BitcoinRawPK {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BitcoinRawPK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BitcoinRawPK {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OpenDime {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OpenDime {
    fn default() -> &'a OpenDime {
        <OpenDime as ::protobuf::Message>::default_instance()
    }
}

impl OpenDime {
    pub fn new() -> OpenDime {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for OpenDime {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OpenDime {
        OpenDime::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<OpenDime>(
                    "OpenDime",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OpenDime {
        static mut instance: ::protobuf::lazy::Lazy<OpenDime> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OpenDime,
        };
        unsafe {
            instance.get(OpenDime::new)
        }
    }
}

impl ::protobuf::Clear for OpenDime {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OpenDime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpenDime {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Bip32Private {
    // message fields
    pub level: u32,
    pub parent_fingerprint: u32,
    pub child_number: u32,
    pub chaincode: ::std::vec::Vec<u8>,
    // message oneof groups
    pub key_type: ::std::option::Option<Bip32Private_oneof_key_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Bip32Private {
    fn default() -> &'a Bip32Private {
        <Bip32Private as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Bip32Private_oneof_key_type {
    open_key(::std::vec::Vec<u8>),
    encrypted_key(super::crypto::Encrypted),
}

impl Bip32Private {
    pub fn new() -> Bip32Private {
        ::std::default::Default::default()
    }

    // uint32 level = 1;


    pub fn get_level(&self) -> u32 {
        self.level
    }
    pub fn clear_level(&mut self) {
        self.level = 0;
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: u32) {
        self.level = v;
    }

    // fixed32 parent_fingerprint = 2;


    pub fn get_parent_fingerprint(&self) -> u32 {
        self.parent_fingerprint
    }
    pub fn clear_parent_fingerprint(&mut self) {
        self.parent_fingerprint = 0;
    }

    // Param is passed by value, moved
    pub fn set_parent_fingerprint(&mut self, v: u32) {
        self.parent_fingerprint = v;
    }

    // uint32 child_number = 3;


    pub fn get_child_number(&self) -> u32 {
        self.child_number
    }
    pub fn clear_child_number(&mut self) {
        self.child_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_child_number(&mut self, v: u32) {
        self.child_number = v;
    }

    // bytes chaincode = 4;


    pub fn get_chaincode(&self) -> &[u8] {
        &self.chaincode
    }
    pub fn clear_chaincode(&mut self) {
        self.chaincode.clear();
    }

    // Param is passed by value, moved
    pub fn set_chaincode(&mut self, v: ::std::vec::Vec<u8>) {
        self.chaincode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chaincode(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.chaincode
    }

    // Take field
    pub fn take_chaincode(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.chaincode, ::std::vec::Vec::new())
    }

    // bytes open_key = 5;


    pub fn get_open_key(&self) -> &[u8] {
        match self.key_type {
            ::std::option::Option::Some(Bip32Private_oneof_key_type::open_key(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_open_key(&mut self) {
        self.key_type = ::std::option::Option::None;
    }

    pub fn has_open_key(&self) -> bool {
        match self.key_type {
            ::std::option::Option::Some(Bip32Private_oneof_key_type::open_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_open_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key_type = ::std::option::Option::Some(Bip32Private_oneof_key_type::open_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_open_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Bip32Private_oneof_key_type::open_key(_)) = self.key_type {
        } else {
            self.key_type = ::std::option::Option::Some(Bip32Private_oneof_key_type::open_key(::std::vec::Vec::new()));
        }
        match self.key_type {
            ::std::option::Option::Some(Bip32Private_oneof_key_type::open_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_open_key(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_open_key() {
            match self.key_type.take() {
                ::std::option::Option::Some(Bip32Private_oneof_key_type::open_key(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .emerald.vault.Encrypted encrypted_key = 6;


    pub fn get_encrypted_key(&self) -> &super::crypto::Encrypted {
        match self.key_type {
            ::std::option::Option::Some(Bip32Private_oneof_key_type::encrypted_key(ref v)) => v,
            _ => super::crypto::Encrypted::default_instance(),
        }
    }
    pub fn clear_encrypted_key(&mut self) {
        self.key_type = ::std::option::Option::None;
    }

    pub fn has_encrypted_key(&self) -> bool {
        match self.key_type {
            ::std::option::Option::Some(Bip32Private_oneof_key_type::encrypted_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_encrypted_key(&mut self, v: super::crypto::Encrypted) {
        self.key_type = ::std::option::Option::Some(Bip32Private_oneof_key_type::encrypted_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_encrypted_key(&mut self) -> &mut super::crypto::Encrypted {
        if let ::std::option::Option::Some(Bip32Private_oneof_key_type::encrypted_key(_)) = self.key_type {
        } else {
            self.key_type = ::std::option::Option::Some(Bip32Private_oneof_key_type::encrypted_key(super::crypto::Encrypted::new()));
        }
        match self.key_type {
            ::std::option::Option::Some(Bip32Private_oneof_key_type::encrypted_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_encrypted_key(&mut self) -> super::crypto::Encrypted {
        if self.has_encrypted_key() {
            match self.key_type.take() {
                ::std::option::Option::Some(Bip32Private_oneof_key_type::encrypted_key(v)) => v,
                _ => panic!(),
            }
        } else {
            super::crypto::Encrypted::new()
        }
    }
}

impl ::protobuf::Message for Bip32Private {
    fn is_initialized(&self) -> bool {
        if let Some(Bip32Private_oneof_key_type::encrypted_key(ref v)) = self.key_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.level = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.parent_fingerprint = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.child_number = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.chaincode)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key_type = ::std::option::Option::Some(Bip32Private_oneof_key_type::open_key(is.read_bytes()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key_type = ::std::option::Option::Some(Bip32Private_oneof_key_type::encrypted_key(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.level != 0 {
            my_size += ::protobuf::rt::value_size(1, self.level, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.parent_fingerprint != 0 {
            my_size += 5;
        }
        if self.child_number != 0 {
            my_size += ::protobuf::rt::value_size(3, self.child_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.chaincode.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.chaincode);
        }
        if let ::std::option::Option::Some(ref v) = self.key_type {
            match v {
                &Bip32Private_oneof_key_type::open_key(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(5, &v);
                },
                &Bip32Private_oneof_key_type::encrypted_key(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.level != 0 {
            os.write_uint32(1, self.level)?;
        }
        if self.parent_fingerprint != 0 {
            os.write_fixed32(2, self.parent_fingerprint)?;
        }
        if self.child_number != 0 {
            os.write_uint32(3, self.child_number)?;
        }
        if !self.chaincode.is_empty() {
            os.write_bytes(4, &self.chaincode)?;
        }
        if let ::std::option::Option::Some(ref v) = self.key_type {
            match v {
                &Bip32Private_oneof_key_type::open_key(ref v) => {
                    os.write_bytes(5, v)?;
                },
                &Bip32Private_oneof_key_type::encrypted_key(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Bip32Private {
        Bip32Private::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "level",
                    |m: &Bip32Private| { &m.level },
                    |m: &mut Bip32Private| { &mut m.level },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                    "parent_fingerprint",
                    |m: &Bip32Private| { &m.parent_fingerprint },
                    |m: &mut Bip32Private| { &mut m.parent_fingerprint },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "child_number",
                    |m: &Bip32Private| { &m.child_number },
                    |m: &mut Bip32Private| { &mut m.child_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "chaincode",
                    |m: &Bip32Private| { &m.chaincode },
                    |m: &mut Bip32Private| { &mut m.chaincode },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "open_key",
                    Bip32Private::has_open_key,
                    Bip32Private::get_open_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::crypto::Encrypted>(
                    "encrypted_key",
                    Bip32Private::has_encrypted_key,
                    Bip32Private::get_encrypted_key,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Bip32Private>(
                    "Bip32Private",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Bip32Private {
        static mut instance: ::protobuf::lazy::Lazy<Bip32Private> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Bip32Private,
        };
        unsafe {
            instance.get(Bip32Private::new)
        }
    }
}

impl ::protobuf::Clear for Bip32Private {
    fn clear(&mut self) {
        self.level = 0;
        self.parent_fingerprint = 0;
        self.child_number = 0;
        self.chaincode.clear();
        self.key_type = ::std::option::Option::None;
        self.key_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Bip32Private {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bip32Private {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x08pk.proto\x12\remerald.vault\x1a\x0ccrypto.proto\"\xd6\x01\n\nPriva\
    teKey\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12?\n\x08ethereum\x18\
    \x02\x20\x01(\x0b2!.emerald.vault.EthereumPrivateKeyH\0R\x08ethereum\x12\
    <\n\x07bitcoin\x18\x03\x20\x01(\x0b2\x20.emerald.vault.BitcoinPrivateKey\
    H\0R\x07bitcoin\x123\n\x05xpriv\x18\x04\x20\x01(\x0b2\x1b.emerald.vault.\
    Bip32PrivateH\0R\x05xprivB\x04\n\x02pk\"M\n\x12EthereumPrivateKey\x12,\n\
    \x02pk\x18\x01\x20\x01(\x0b2\x1a.emerald.vault.EthereumPK3H\0R\x02pkB\t\
    \n\x07pk_type\"\x80\x02\n\x11BitcoinPrivateKey\x12?\n\x06format\x18\x01\
    \x20\x01(\x0e2'.emerald.vault.BitcoinPrivateKey.FormatR\x06format\x12-\n\
    \x02pk\x18\x02\x20\x01(\x0b2\x1b.emerald.vault.BitcoinRawPKH\0R\x02pk\
    \x126\n\topen_dime\x18\x03\x20\x01(\x0b2\x17.emerald.vault.OpenDimeH\0R\
    \x08openDime\"8\n\x06Format\x12\r\n\tUNDEFINED\x10\0\x12\t\n\x05P2PKH\
    \x10\x01\x12\x08\n\x04P2SH\x10\x02\x12\n\n\x06BECH32\x10\x03B\t\n\x07pk_\
    type\"W\n\x0bEthereumPK3\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07add\
    ress\x12.\n\x05value\x18\x02\x20\x01(\x0b2\x18.emerald.vault.EncryptedR\
    \x05value\"$\n\x0cBitcoinRawPK\x12\x14\n\x05value\x18\x01\x20\x01(\x0cR\
    \x05value\"\n\n\x08OpenDime\"\xfe\x01\n\x0cBip32Private\x12\x14\n\x05lev\
    el\x18\x01\x20\x01(\rR\x05level\x12-\n\x12parent_fingerprint\x18\x02\x20\
    \x01(\x07R\x11parentFingerprint\x12!\n\x0cchild_number\x18\x03\x20\x01(\
    \rR\x0bchildNumber\x12\x1c\n\tchaincode\x18\x04\x20\x01(\x0cR\tchaincode\
    \x12\x1b\n\x08open_key\x18\x05\x20\x01(\x0cH\0R\x07openKey\x12?\n\rencry\
    pted_key\x18\x06\x20\x01(\x0b2\x18.emerald.vault.EncryptedH\0R\x0cencryp\
    tedKeyB\n\n\x08key_typeJ\xc4\x0c\n\x06\x12\x04\0\08\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x16\n\t\n\x02\x03\0\x12\
    \x03\x02\0\x16\n\n\n\x02\x04\0\x12\x04\x04\0\x0b\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x04\x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04\x12\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x05\x0b\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x10\x11\n\x0c\n\
    \x04\x04\0\x08\0\x12\x04\x06\x04\n\x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\
    \x03\x06\n\x0c\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x08(\n\x0c\n\x05\
    \x04\0\x02\x01\x06\x12\x03\x07\x08\x1a\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x07\x1b#\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07&'\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\x08\x08&\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\
    \x08\x08\x19\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x08\x1a!\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x08$%\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x08\
    \x1f\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\t\x08\x14\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\t\x15\x1a\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\
    \x1d\x1e\n\n\n\x02\x04\x01\x12\x04\r\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\r\x08\x1a\n\x0c\n\x04\x04\x01\x08\0\x12\x04\x0e\x04\x10\x05\n\x0c\n\
    \x05\x04\x01\x08\0\x01\x12\x03\x0e\n\x11\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x0f\x08\x1b\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0f\x08\x13\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x0f\x14\x16\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x0f\x19\x1a\n\n\n\x02\x04\x02\x12\x04\x13\0\x20\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x13\x08\x19\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x14\x04\x16\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x14\x04\n\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x14\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x14\x14\x15\n\x0c\n\x04\x04\x02\x08\0\x12\x04\x15\x04\x18\x05\n\x0c\
    \n\x05\x04\x02\x08\0\x01\x12\x03\x15\n\x11\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03\x16\x08\x1c\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x16\x08\x14\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x16\x15\x17\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03\x16\x1a\x1b\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x17\
    \x08\x1f\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x17\x08\x10\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x17\x11\x1a\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03\x17\x1d\x1e\n\x0c\n\x04\x04\x02\x04\0\x12\x04\x1a\x04\x1f\x05\n\
    \x0c\n\x05\x04\x02\x04\0\x01\x12\x03\x1a\t\x0f\n\r\n\x06\x04\x02\x04\0\
    \x02\0\x12\x03\x1b\x08\x16\n\x0e\n\x07\x04\x02\x04\0\x02\0\x01\x12\x03\
    \x1b\x08\x11\n\x0e\n\x07\x04\x02\x04\0\x02\0\x02\x12\x03\x1b\x14\x15\n:\
    \n\x06\x04\x02\x04\0\x02\x01\x12\x03\x1c\x08\x12\"+P2PKH\x20-\x2017VZNX1\
    SN5NtKa8UQFxwQbFeFc3iqRYhem\n\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x01\x12\
    \x03\x1c\x08\r\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x03\x1c\x10\x11\
    \n9\n\x06\x04\x02\x04\0\x02\x02\x12\x03\x1d\x08\x11\"*P2SH\x20-\x203Ektn\
    HQD7RiAE6uzMj2ZifT9YgRrkSgzQX\n\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\
    \x12\x03\x1d\x08\x0c\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x02\x12\x03\x1d\
    \x0f\x10\n:\n\x06\x04\x02\x04\0\x02\x03\x12\x03\x1e\x08\x13\"+bc1qw508d6\
    qejxtdg4y5r3zarvary0c5xw7kv8f3t4\n\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x01\
    \x12\x03\x1e\x08\x0e\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x02\x12\x03\x1e\
    \x11\x12\n\n\n\x02\x04\x03\x12\x04\"\0%\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03\"\x08\x13\n\x0b\n\x04\x04\x03\x02\0\x12\x03#\x04\x17\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03#\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03#\
    \x0b\x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03#\x15\x16\n\x0b\n\x04\x04\
    \x03\x02\x01\x12\x03$\x04\x18\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03$\
    \x04\r\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03$\x0e\x13\n\x0c\n\x05\x04\
    \x03\x02\x01\x03\x12\x03$\x16\x17\n\n\n\x02\x04\x04\x12\x04'\0)\x01\n\n\
    \n\x03\x04\x04\x01\x12\x03'\x08\x14\n\x0b\n\x04\x04\x04\x02\0\x12\x03(\
    \x04\x14\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03(\x04\t\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03(\n\x0f\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03(\x12\
    \x13\n\n\n\x02\x04\x05\x12\x04+\0,\x01\n\n\n\x03\x04\x05\x01\x12\x03+\
    \x08\x10\n\n\n\x02\x04\x06\x12\x04.\08\x01\n\n\n\x03\x04\x06\x01\x12\x03\
    .\x08\x14\n\x0b\n\x04\x04\x06\x02\0\x12\x03/\x04\x15\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03/\x04\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03/\x0b\x10\
    \n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03/\x13\x14\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x030\x04#\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x030\x04\x0b\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x030\x0c\x1e\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x030!\"\n\x0b\n\x04\x04\x06\x02\x02\x12\x031\x04\x1c\n\x0c\
    \n\x05\x04\x06\x02\x02\x05\x12\x031\x04\n\n\x0c\n\x05\x04\x06\x02\x02\
    \x01\x12\x031\x0b\x17\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x031\x1a\x1b\n\
    \x0b\n\x04\x04\x06\x02\x03\x12\x032\x04\x18\n\x0c\n\x05\x04\x06\x02\x03\
    \x05\x12\x032\x04\t\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x032\n\x13\n\x0c\
    \n\x05\x04\x06\x02\x03\x03\x12\x032\x16\x17\n\x0c\n\x04\x04\x06\x08\0\
    \x12\x044\x047\x05\n\x0c\n\x05\x04\x06\x08\0\x01\x12\x034\n\x12\n\x0b\n\
    \x04\x04\x06\x02\x04\x12\x035\x08\x1b\n\x0c\n\x05\x04\x06\x02\x04\x05\
    \x12\x035\x08\r\n\x0c\n\x05\x04\x06\x02\x04\x01\x12\x035\x0e\x16\n\x0c\n\
    \x05\x04\x06\x02\x04\x03\x12\x035\x19\x1a\n\x0b\n\x04\x04\x06\x02\x05\
    \x12\x036\x08$\n\x0c\n\x05\x04\x06\x02\x05\x06\x12\x036\x08\x11\n\x0c\n\
    \x05\x04\x06\x02\x05\x01\x12\x036\x12\x1f\n\x0c\n\x05\x04\x06\x02\x05\
    \x03\x12\x036\"#b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
