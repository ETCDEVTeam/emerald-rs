// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `wallet.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Wallet {
    // message fields
    pub file_type: super::common::FileType,
    pub id: ::std::vec::Vec<u8>,
    pub label: ::std::string::String,
    pub hd_accounts: ::protobuf::RepeatedField<Reserved>,
    pub accounts: ::protobuf::RepeatedField<WalletAccount>,
    pub account_seq: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Wallet {
    fn default() -> &'a Wallet {
        <Wallet as ::protobuf::Message>::default_instance()
    }
}

impl Wallet {
    pub fn new() -> Wallet {
        ::std::default::Default::default()
    }

    // .emerald.vault.FileType file_type = 1;


    pub fn get_file_type(&self) -> super::common::FileType {
        self.file_type
    }
    pub fn clear_file_type(&mut self) {
        self.file_type = super::common::FileType::FILE_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_file_type(&mut self, v: super::common::FileType) {
        self.file_type = v;
    }

    // bytes id = 2;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // string label = 3;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // repeated .emerald.vault.Reserved hd_accounts = 4;


    pub fn get_hd_accounts(&self) -> &[Reserved] {
        &self.hd_accounts
    }
    pub fn clear_hd_accounts(&mut self) {
        self.hd_accounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_hd_accounts(&mut self, v: ::protobuf::RepeatedField<Reserved>) {
        self.hd_accounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hd_accounts(&mut self) -> &mut ::protobuf::RepeatedField<Reserved> {
        &mut self.hd_accounts
    }

    // Take field
    pub fn take_hd_accounts(&mut self) -> ::protobuf::RepeatedField<Reserved> {
        ::std::mem::replace(&mut self.hd_accounts, ::protobuf::RepeatedField::new())
    }

    // repeated .emerald.vault.WalletAccount accounts = 5;


    pub fn get_accounts(&self) -> &[WalletAccount] {
        &self.accounts
    }
    pub fn clear_accounts(&mut self) {
        self.accounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_accounts(&mut self, v: ::protobuf::RepeatedField<WalletAccount>) {
        self.accounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_accounts(&mut self) -> &mut ::protobuf::RepeatedField<WalletAccount> {
        &mut self.accounts
    }

    // Take field
    pub fn take_accounts(&mut self) -> ::protobuf::RepeatedField<WalletAccount> {
        ::std::mem::replace(&mut self.accounts, ::protobuf::RepeatedField::new())
    }

    // uint32 account_seq = 6;


    pub fn get_account_seq(&self) -> u32 {
        self.account_seq
    }
    pub fn clear_account_seq(&mut self) {
        self.account_seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_seq(&mut self, v: u32) {
        self.account_seq = v;
    }
}

impl ::protobuf::Message for Wallet {
    fn is_initialized(&self) -> bool {
        for v in &self.hd_accounts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accounts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.file_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.hd_accounts)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.accounts)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.account_seq = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.file_type != super::common::FileType::FILE_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.file_type);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.label);
        }
        for value in &self.hd_accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.account_seq != 0 {
            my_size += ::protobuf::rt::value_size(6, self.account_seq, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.file_type != super::common::FileType::FILE_UNKNOWN {
            os.write_enum(1, self.file_type.value())?;
        }
        if !self.id.is_empty() {
            os.write_bytes(2, &self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(3, &self.label)?;
        }
        for v in &self.hd_accounts {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.accounts {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.account_seq != 0 {
            os.write_uint32(6, self.account_seq)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Wallet {
        Wallet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::FileType>>(
                    "file_type",
                    |m: &Wallet| { &m.file_type },
                    |m: &mut Wallet| { &mut m.file_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &Wallet| { &m.id },
                    |m: &mut Wallet| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label",
                    |m: &Wallet| { &m.label },
                    |m: &mut Wallet| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Reserved>>(
                    "hd_accounts",
                    |m: &Wallet| { &m.hd_accounts },
                    |m: &mut Wallet| { &mut m.hd_accounts },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WalletAccount>>(
                    "accounts",
                    |m: &Wallet| { &m.accounts },
                    |m: &mut Wallet| { &mut m.accounts },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "account_seq",
                    |m: &Wallet| { &m.account_seq },
                    |m: &mut Wallet| { &mut m.account_seq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Wallet>(
                    "Wallet",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Wallet {
        static mut instance: ::protobuf::lazy::Lazy<Wallet> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Wallet,
        };
        unsafe {
            instance.get(Wallet::new)
        }
    }
}

impl ::protobuf::Clear for Wallet {
    fn clear(&mut self) {
        self.file_type = super::common::FileType::FILE_UNKNOWN;
        self.id.clear();
        self.label.clear();
        self.hd_accounts.clear();
        self.accounts.clear();
        self.account_seq = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Wallet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Wallet {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Reserved {
    // message fields
    pub seed_id: ::std::vec::Vec<u8>,
    pub account_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Reserved {
    fn default() -> &'a Reserved {
        <Reserved as ::protobuf::Message>::default_instance()
    }
}

impl Reserved {
    pub fn new() -> Reserved {
        ::std::default::Default::default()
    }

    // bytes seed_id = 1;


    pub fn get_seed_id(&self) -> &[u8] {
        &self.seed_id
    }
    pub fn clear_seed_id(&mut self) {
        self.seed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_seed_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.seed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seed_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.seed_id
    }

    // Take field
    pub fn take_seed_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.seed_id, ::std::vec::Vec::new())
    }

    // uint32 account_id = 2;


    pub fn get_account_id(&self) -> u32 {
        self.account_id
    }
    pub fn clear_account_id(&mut self) {
        self.account_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = v;
    }
}

impl ::protobuf::Message for Reserved {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.seed_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.account_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seed_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.seed_id);
        }
        if self.account_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.account_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seed_id.is_empty() {
            os.write_bytes(1, &self.seed_id)?;
        }
        if self.account_id != 0 {
            os.write_uint32(2, self.account_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Reserved {
        Reserved::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "seed_id",
                    |m: &Reserved| { &m.seed_id },
                    |m: &mut Reserved| { &mut m.seed_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "account_id",
                    |m: &Reserved| { &m.account_id },
                    |m: &mut Reserved| { &mut m.account_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Reserved>(
                    "Reserved",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Reserved {
        static mut instance: ::protobuf::lazy::Lazy<Reserved> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Reserved,
        };
        unsafe {
            instance.get(Reserved::new)
        }
    }
}

impl ::protobuf::Clear for Reserved {
    fn clear(&mut self) {
        self.seed_id.clear();
        self.account_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Reserved {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Reserved {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WalletAccount {
    // message fields
    pub id: u32,
    pub blockchain_id: u32,
    pub receive_disabled: bool,
    pub address: ::protobuf::SingularPtrField<super::address::Address>,
    // message oneof groups
    pub pk_type: ::std::option::Option<WalletAccount_oneof_pk_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WalletAccount {
    fn default() -> &'a WalletAccount {
        <WalletAccount as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum WalletAccount_oneof_pk_type {
    hd_path(super::seed::SeedHD),
    pk_id(::std::vec::Vec<u8>),
}

impl WalletAccount {
    pub fn new() -> WalletAccount {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // uint32 blockchain_id = 2;


    pub fn get_blockchain_id(&self) -> u32 {
        self.blockchain_id
    }
    pub fn clear_blockchain_id(&mut self) {
        self.blockchain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_blockchain_id(&mut self, v: u32) {
        self.blockchain_id = v;
    }

    // bool receive_disabled = 3;


    pub fn get_receive_disabled(&self) -> bool {
        self.receive_disabled
    }
    pub fn clear_receive_disabled(&mut self) {
        self.receive_disabled = false;
    }

    // Param is passed by value, moved
    pub fn set_receive_disabled(&mut self, v: bool) {
        self.receive_disabled = v;
    }

    // .emerald.vault.Address address = 5;


    pub fn get_address(&self) -> &super::address::Address {
        self.address.as_ref().unwrap_or_else(|| super::address::Address::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::Address) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::address::Address {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::Address {
        self.address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // .emerald.vault.SeedHD hd_path = 7;


    pub fn get_hd_path(&self) -> &super::seed::SeedHD {
        match self.pk_type {
            ::std::option::Option::Some(WalletAccount_oneof_pk_type::hd_path(ref v)) => v,
            _ => super::seed::SeedHD::default_instance(),
        }
    }
    pub fn clear_hd_path(&mut self) {
        self.pk_type = ::std::option::Option::None;
    }

    pub fn has_hd_path(&self) -> bool {
        match self.pk_type {
            ::std::option::Option::Some(WalletAccount_oneof_pk_type::hd_path(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hd_path(&mut self, v: super::seed::SeedHD) {
        self.pk_type = ::std::option::Option::Some(WalletAccount_oneof_pk_type::hd_path(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hd_path(&mut self) -> &mut super::seed::SeedHD {
        if let ::std::option::Option::Some(WalletAccount_oneof_pk_type::hd_path(_)) = self.pk_type {
        } else {
            self.pk_type = ::std::option::Option::Some(WalletAccount_oneof_pk_type::hd_path(super::seed::SeedHD::new()));
        }
        match self.pk_type {
            ::std::option::Option::Some(WalletAccount_oneof_pk_type::hd_path(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hd_path(&mut self) -> super::seed::SeedHD {
        if self.has_hd_path() {
            match self.pk_type.take() {
                ::std::option::Option::Some(WalletAccount_oneof_pk_type::hd_path(v)) => v,
                _ => panic!(),
            }
        } else {
            super::seed::SeedHD::new()
        }
    }

    // bytes pk_id = 8;


    pub fn get_pk_id(&self) -> &[u8] {
        match self.pk_type {
            ::std::option::Option::Some(WalletAccount_oneof_pk_type::pk_id(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_pk_id(&mut self) {
        self.pk_type = ::std::option::Option::None;
    }

    pub fn has_pk_id(&self) -> bool {
        match self.pk_type {
            ::std::option::Option::Some(WalletAccount_oneof_pk_type::pk_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pk_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.pk_type = ::std::option::Option::Some(WalletAccount_oneof_pk_type::pk_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pk_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(WalletAccount_oneof_pk_type::pk_id(_)) = self.pk_type {
        } else {
            self.pk_type = ::std::option::Option::Some(WalletAccount_oneof_pk_type::pk_id(::std::vec::Vec::new()));
        }
        match self.pk_type {
            ::std::option::Option::Some(WalletAccount_oneof_pk_type::pk_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pk_id(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_pk_id() {
            match self.pk_type.take() {
                ::std::option::Option::Some(WalletAccount_oneof_pk_type::pk_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for WalletAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(WalletAccount_oneof_pk_type::hd_path(ref v)) = self.pk_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.blockchain_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.receive_disabled = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk_type = ::std::option::Option::Some(WalletAccount_oneof_pk_type::hd_path(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk_type = ::std::option::Option::Some(WalletAccount_oneof_pk_type::pk_id(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.blockchain_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.blockchain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.receive_disabled != false {
            my_size += 2;
        }
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.pk_type {
            match v {
                &WalletAccount_oneof_pk_type::hd_path(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WalletAccount_oneof_pk_type::pk_id(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(8, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.blockchain_id != 0 {
            os.write_uint32(2, self.blockchain_id)?;
        }
        if self.receive_disabled != false {
            os.write_bool(3, self.receive_disabled)?;
        }
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.pk_type {
            match v {
                &WalletAccount_oneof_pk_type::hd_path(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WalletAccount_oneof_pk_type::pk_id(ref v) => {
                    os.write_bytes(8, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WalletAccount {
        WalletAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "id",
                    |m: &WalletAccount| { &m.id },
                    |m: &mut WalletAccount| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "blockchain_id",
                    |m: &WalletAccount| { &m.blockchain_id },
                    |m: &mut WalletAccount| { &mut m.blockchain_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "receive_disabled",
                    |m: &WalletAccount| { &m.receive_disabled },
                    |m: &mut WalletAccount| { &mut m.receive_disabled },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                    "address",
                    |m: &WalletAccount| { &m.address },
                    |m: &mut WalletAccount| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::seed::SeedHD>(
                    "hd_path",
                    WalletAccount::has_hd_path,
                    WalletAccount::get_hd_path,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "pk_id",
                    WalletAccount::has_pk_id,
                    WalletAccount::get_pk_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WalletAccount>(
                    "WalletAccount",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WalletAccount {
        static mut instance: ::protobuf::lazy::Lazy<WalletAccount> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WalletAccount,
        };
        unsafe {
            instance.get(WalletAccount::new)
        }
    }
}

impl ::protobuf::Clear for WalletAccount {
    fn clear(&mut self) {
        self.id = 0;
        self.blockchain_id = 0;
        self.receive_disabled = false;
        self.address.clear();
        self.pk_type = ::std::option::Option::None;
        self.pk_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WalletAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WalletAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cwallet.proto\x12\remerald.vault\x1a\raddress.proto\x1a\nseed.proto\
    \x1a\x0ccommon.proto\"\xf9\x01\n\x06Wallet\x124\n\tfile_type\x18\x01\x20\
    \x01(\x0e2\x17.emerald.vault.FileTypeR\x08fileType\x12\x0e\n\x02id\x18\
    \x02\x20\x01(\x0cR\x02id\x12\x14\n\x05label\x18\x03\x20\x01(\tR\x05label\
    \x128\n\x0bhd_accounts\x18\x04\x20\x03(\x0b2\x17.emerald.vault.ReservedR\
    \nhdAccounts\x128\n\x08accounts\x18\x05\x20\x03(\x0b2\x1c.emerald.vault.\
    WalletAccountR\x08accounts\x12\x1f\n\x0baccount_seq\x18\x06\x20\x01(\rR\
    \naccountSeq\"B\n\x08Reserved\x12\x17\n\x07seed_id\x18\x01\x20\x01(\x0cR\
    \x06seedId\x12\x1d\n\naccount_id\x18\x02\x20\x01(\rR\taccountId\"\xf5\
    \x01\n\rWalletAccount\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12#\n\r\
    blockchain_id\x18\x02\x20\x01(\rR\x0cblockchainId\x12)\n\x10receive_disa\
    bled\x18\x03\x20\x01(\x08R\x0freceiveDisabled\x120\n\x07address\x18\x05\
    \x20\x01(\x0b2\x16.emerald.vault.AddressR\x07address\x120\n\x07hd_path\
    \x18\x07\x20\x01(\x0b2\x15.emerald.vault.SeedHDH\0R\x06hdPath\x12\x15\n\
    \x05pk_id\x18\x08\x20\x01(\x0cH\0R\x04pkIdB\t\n\x07pk_typeJ\x8f\x0e\n\
    \x06\x12\x04\0\00\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x16\n\t\n\x02\x03\0\x12\x03\x02\0\x17\n\t\n\x02\x03\x01\
    \x12\x03\x03\0\x14\n\t\n\x02\x03\x02\x12\x03\x04\0\x16\nG\n\x02\x04\0\
    \x12\x04\x07\0\x17\x01\x1a;\x20Wallet\x20is\x20a\x20user\x20defined\x20g\
    roup\x20of\x20addresses\x20used\x20together\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x07\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x04\x1b\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03\x08\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x08\r\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x19\x1a\n\x13\n\x04\
    \x04\0\x02\x01\x12\x03\n\x04\x11\x1a\x06\x20UUID\n\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\n\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\n\x0c\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n\x0f\x10\n!\n\x04\x04\0\x02\x02\
    \x12\x03\x0c\x04\x15\x1a\x14\x20User\x20defined\x20label\n\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\x0c\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x0c\x0b\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0c\x13\x14\n\x9c\
    \x01\n\x04\x04\0\x02\x03\x12\x03\x10\x04&\x1a\x8e\x01\x20List\x20of\x20H\
    DPath\x20accounts\x20that\x20belongs\x20to\x20the\x20wallet,\x20used\x20\
    to\x20automate\x20finding\x20new\n\x20addresses\x20and\x20avoiding\x20co\
    llision\x20between\x20different\x20wallets\n\n\x0c\n\x05\x04\0\x02\x03\
    \x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x10\r\x15\
    \n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x10\x16!\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x10$%\n,\n\x04\x04\0\x02\x04\x12\x03\x12\x04(\x1a\x1f\
    \x20Actual\x20accounts\x20in\x20the\x20wallet\n\n\x0c\n\x05\x04\0\x02\
    \x04\x04\x12\x03\x12\x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x12\r\
    \x1a\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x12\x1b#\n\x0c\n\x05\x04\0\
    \x02\x04\x03\x12\x03\x12&'\n\xd8\x01\n\x04\x04\0\x02\x05\x12\x03\x16\x04\
    \x1b\x1a\xca\x01\x20Sequence\x20for\x20account\x20ids\x20in\x20that\x20w\
    allet.\x20Incremented\x20each\x20time\x20a\x20new\x20account\x20added,\
    \x20and\x20used\n\x20as\x20the\x20id\x20that\x20new\x20account.\x20Using\
    \x20this\x20sequence,\x20if\x20account\x20gets\x20deleted\x20its\x20id\
    \x20is\x20not\x20going\n\x20to\x20be\x20reused\n\n\x0c\n\x05\x04\0\x02\
    \x05\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x16\x0b\
    \x16\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x16\x19\x1a\n=\n\x02\x04\x01\
    \x12\x04\x1a\0\x1f\x01\x1a1\x20Reserved\x20index\x20on\x20a\x20HD\x20pat\
    h,\x20an\x20x\x20from\x20m/44'/x'\n\n\n\n\x03\x04\x01\x01\x12\x03\x1a\
    \x08\x10\n)\n\x04\x04\x01\x02\0\x12\x03\x1c\x04\x16\x1a\x1c\x20reference\
    \x20to\x20a\x20source\x20seed\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\
    \x1c\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1c\n\x11\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x1c\x14\x15\n\"\n\x04\x04\x01\x02\x01\x12\x03\
    \x1e\x04\x1a\x1a\x15\x20reserved\x20account\x20id\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\x1e\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x1e\x0b\x15\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1e\x18\x19\n\x1d\n\
    \x02\x04\x02\x12\x04\"\00\x01\x1a\x11\x20Account\x20details\n\n\n\n\x03\
    \x04\x02\x01\x12\x03\"\x08\x15\n1\n\x04\x04\x02\x02\0\x12\x03$\x04\x12\
    \x1a$\x20id\x20to\x20reference\x20account\x20per\x20wallet\n\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03$\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03$\
    \x0b\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03$\x10\x11\ng\n\x04\x04\x02\
    \x02\x01\x12\x03&\x04\x1d\x1aZ\x20Associated\x20blockchain;\x20account\
    \x20may\x20have\x20multiple\x20different\x20assets\x20on\x20a\x20single\
    \x20blockchain\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03&\x04\n\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03&\x0b\x18\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03&\x1b\x1c\nO\n\x04\x04\x02\x02\x02\x12\x03(\x04\x1e\x1aB\x20\
    true\x20if\x20account\x20is\x20disabled\x20for\x20receiving,\x20i.e.\x20\
    only\x20for\x20sending\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03(\x04\
    \x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03(\t\x19\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03(\x1c\x1d\n+\n\x04\x04\x02\x02\x03\x12\x03*\x04\x18\
    \x1a\x1e\x20public\x20address\x20for\x20reference\n\n\x0c\n\x05\x04\x02\
    \x02\x03\x06\x12\x03*\x04\x0b\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03*\
    \x0c\x13\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03*\x16\x17\n\x1f\n\x04\
    \x04\x02\x08\0\x12\x04,\x04/\x05\x1a\x11\x20reference\x20to\x20PK\n\n\
    \x0c\n\x05\x04\x02\x08\0\x01\x12\x03,\n\x11\n\x0b\n\x04\x04\x02\x02\x04\
    \x12\x03-\x08\x1b\n\x0c\n\x05\x04\x02\x02\x04\x06\x12\x03-\x08\x0e\n\x0c\
    \n\x05\x04\x02\x02\x04\x01\x12\x03-\x0f\x16\n\x0c\n\x05\x04\x02\x02\x04\
    \x03\x12\x03-\x19\x1a\n\x0b\n\x04\x04\x02\x02\x05\x12\x03.\x08\x18\n\x0c\
    \n\x05\x04\x02\x02\x05\x05\x12\x03.\x08\r\n\x0c\n\x05\x04\x02\x02\x05\
    \x01\x12\x03.\x0e\x13\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03.\x16\x17b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
